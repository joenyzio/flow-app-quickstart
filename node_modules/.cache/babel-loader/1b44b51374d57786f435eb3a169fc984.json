{"ast":null,"code":"var _jsxFileName = \"/Users/joenyzio/Documents/GitHub/flow/flow-app-quickstart/flow-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./config\";\nimport { useState, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState({\n    loggedIn: null\n  });\n  const [name, setName] = useState('');\n  const [transactionStatus, setTransactionStatus] = useState(null); // NEW\n\n  useEffect(() => fcl.currentUser.subscribe(setUser), []);\n\n  const sendQuery = async () => {\n    var _profile$name;\n\n    const profile = await fcl.query({\n      cadence: `\n        import Profile from 0xProfile\n\n        pub fun main(address: Address): Profile.ReadOnly? {\n          return Profile.read(address)\n        }\n      `,\n      args: (arg, t) => [arg(user.addr, t.Address)]\n    });\n    setName((_profile$name = profile === null || profile === void 0 ? void 0 : profile.name) !== null && _profile$name !== void 0 ? _profile$name : 'No Profile');\n  };\n\n  const initAccount = async () => {\n    const transactionId = await fcl.mutate({\n      cadence: `\n        import Profile from 0xProfile\n\n        transaction {\n          prepare(account: AuthAccount) {\n            // Only initialize the account if it hasn't already been initialized\n            if (!Profile.check(account.address)) {\n              // This creates and stores the profile in the user's account\n              account.save(<- Profile.new(), to: Profile.privatePath)\n\n              // This creates the public capability that lets applications read the profile's info\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\n            }\n          }\n        }\n      `,\n      payer: fcl.authz,\n      proposer: fcl.authz,\n      authorizations: [fcl.authz],\n      limit: 50\n    });\n    const transaction = await fcl.tx(transactionId).onceSealed();\n    console.log(transaction);\n  }; // NEW\n\n\n  const executeTransaction = async () => {\n    const transactionId = await fcl.mutate({\n      cadence: `\n        import Profile from 0xProfile\n\n        transaction(name: String) {\n          prepare(account: AuthAccount) {\n            account\n              .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\n              .setName(name)\n          }\n        }\n      `,\n      args: (arg, t) => [arg(\"Flow Developer!\", t.String)],\n      payer: fcl.authz,\n      proposer: fcl.authz,\n      authorizations: [fcl.authz],\n      limit: 50\n    });\n    fcl.tx(transactionId).subscribe(res => setTransactionStatus(res.status));\n  };\n\n  const AuthedState = () => {\n    var _user$addr;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Address: \", (_user$addr = user === null || user === void 0 ? void 0 : user.addr) !== null && _user$addr !== void 0 ? _user$addr : \"No Address\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Profile Name: \", name !== null && name !== void 0 ? name : \"--\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Transaction Status: \", transactionStatus !== null && transactionStatus !== void 0 ? transactionStatus : \"--\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendQuery,\n        children: \"Send Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: initAccount,\n        children: \"Init Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeTransaction,\n        children: \"Execute Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fcl.unauthenticate,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n\n  const UnauthenticatedState = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fcl.logIn,\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fcl.signUp,\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flow App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), user.loggedIn ? /*#__PURE__*/_jsxDEV(AuthedState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(UnauthenticatedState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ica1+FmViRMkmTQt/rDh6S53sYs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joenyzio/Documents/GitHub/flow/flow-app-quickstart/flow-app/src/App.js"],"names":["useState","useEffect","fcl","App","user","setUser","loggedIn","name","setName","transactionStatus","setTransactionStatus","currentUser","subscribe","sendQuery","profile","query","cadence","args","arg","t","addr","Address","initAccount","transactionId","mutate","payer","authz","proposer","authorizations","limit","transaction","tx","onceSealed","console","log","executeTransaction","String","res","status","AuthedState","unauthenticate","UnauthenticatedState","logIn","signUp"],"mappings":"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","sourcesContent":["import \"./config\";\nimport { useState, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\n\nfunction App() {\n  const [user, setUser] = useState({loggedIn: null})\n  const [name, setName] = useState('')\n  const [transactionStatus, setTransactionStatus] = useState(null) // NEW\n\n  useEffect(() => fcl.currentUser.subscribe(setUser), [])\n\n  const sendQuery = async () => {\n    const profile = await fcl.query({\n      cadence: `\n        import Profile from 0xProfile\n\n        pub fun main(address: Address): Profile.ReadOnly? {\n          return Profile.read(address)\n        }\n      `,\n      args: (arg, t) => [arg(user.addr, t.Address)]\n    })\n\n    setName(profile?.name ?? 'No Profile')\n  }\n\n  const initAccount = async () => {\n    const transactionId = await fcl.mutate({\n      cadence: `\n        import Profile from 0xProfile\n\n        transaction {\n          prepare(account: AuthAccount) {\n            // Only initialize the account if it hasn't already been initialized\n            if (!Profile.check(account.address)) {\n              // This creates and stores the profile in the user's account\n              account.save(<- Profile.new(), to: Profile.privatePath)\n\n              // This creates the public capability that lets applications read the profile's info\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\n            }\n          }\n        }\n      `,\n      payer: fcl.authz,\n      proposer: fcl.authz,\n      authorizations: [fcl.authz],\n      limit: 50\n    })\n\n    const transaction = await fcl.tx(transactionId).onceSealed()\n    console.log(transaction)\n  }\n\n  // NEW\n  const executeTransaction = async () => {\n    const transactionId = await fcl.mutate({\n      cadence: `\n        import Profile from 0xProfile\n\n        transaction(name: String) {\n          prepare(account: AuthAccount) {\n            account\n              .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\n              .setName(name)\n          }\n        }\n      `,\n      args: (arg, t) => [arg(\"Flow Developer!\", t.String)],\n      payer: fcl.authz,\n      proposer: fcl.authz,\n      authorizations: [fcl.authz],\n      limit: 50\n    })\n\n    fcl.tx(transactionId).subscribe(res => setTransactionStatus(res.status))\n  }\n\n  const AuthedState = () => {\n    return (\n      <div>\n        <div>Address: {user?.addr ?? \"No Address\"}</div>\n        <div>Profile Name: {name ?? \"--\"}</div>\n        <div>Transaction Status: {transactionStatus ?? \"--\"}</div> {/* NEW */}\n        <button onClick={sendQuery}>Send Query</button>\n        <button onClick={initAccount}>Init Account</button>\n        <button onClick={executeTransaction}>Execute Transaction</button> {/* NEW */}\n        <button onClick={fcl.unauthenticate}>Log Out</button>\n      </div>\n    )\n  }\n\n  const UnauthenticatedState = () => {\n    return (\n      <div>\n        <button onClick={fcl.logIn}>Log In</button>\n        <button onClick={fcl.signUp}>Sign Up</button>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Flow App</h1>\n      {user.loggedIn\n        ? <AuthedState />\n        : <UnauthenticatedState />\n      }\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}